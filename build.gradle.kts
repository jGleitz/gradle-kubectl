@file:Suppress("HasPlatformType", "SuspiciousCollectionReassignment")

import org.jetbrains.kotlin.config.KotlinCompilerVersion
import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	kotlin("jvm") version "1.4.10"
	kotlin("plugin.serialization") version "1.4.10"
	`java-gradle-plugin`
	`kotlin-dsl`
	id("com.palantir.git-version") version "0.12.3"
}

group = "de.joshuagleitze"
version = if (isSnapshot) versionDetails.gitHash else versionDetails.lastTag.drop("v")
status = if (isSnapshot) "snapshot" else "release"

repositories {
	mavenCentral()
}

val generator by sourceSets.creating
val generatorImplementation = configurations[generator.implementationConfigurationName]
val generatorRuntime = configurations[generator.runtimeOnlyConfigurationName]
val data by sourceSets.creating
val dataImplementation = configurations[data.implementationConfigurationName]
val generated by sourceSets.creating
val generatedImplementation = configurations[generated.implementationConfigurationName]

dependencies {
	val spekVersion = "2.0.9"
	val ktorVersion = "1.4.1"

	implementation(data.output)
	implementation(generated.output)
	implementation(name = "gradle-download-task", version = "4.1.1", group = "de.undercouch")

	testImplementation(name = "spek-dsl-jvm", version = spekVersion, group = "org.spekframework.spek2")
	testImplementation(name = "atrium-fluent-en_GB", version = "0.13.0", group = "ch.tutteli.atrium")
	testImplementation(name = "atrium-gradle-testkit-fluent-en", version = "1.0.0", group = "de.joshuagleitze")
	testImplementation(name = "spek-testfiles", version = "1.0.2", group = "de.joshuagleitze")
	testImplementation(name = "mockk", version = "1.10.0", group = "io.mockk")
	testRuntimeOnly(name = "spek-runner-junit5", version = spekVersion, group = "org.spekframework.spek2")

	generatorImplementation(data.output)
	generatorImplementation(kotlin("reflect"))
	generatorImplementation(name = "kotlinx-coroutines-core", version = "1.3.9", group = "org.jetbrains.kotlinx")
	generatorImplementation(name = "kotlinx-serialization-json", version = "1.0.0-RC2", group = "org.jetbrains.kotlinx")
	generatorImplementation(name = "kotlinpoet", version = "1.6.0", group = "com.squareup")
	generatorImplementation(name = "ktor-client-cio", version = ktorVersion, group = "io.ktor")
	generatorImplementation(name = "ktor-client-logging", version = ktorVersion, group = "io.ktor")
	generatorImplementation(name = "ktor-client-serialization", version = ktorVersion, group = "io.ktor")
	generatorImplementation(name = "jansi", version = "2.0.1", group = "org.fusesource.jansi")

	generatedImplementation(data.output)

	constraints {
		testImplementation("org.jetbrains.kotlin:kotlin-reflect:${KotlinCompilerVersion.VERSION}") {
			because("transitive dependencies refer to previous versions, but all Kotlin artefacts need to have the same version")
		}
	}
}

gradlePlugin {
	plugins {
		create("kubectl") {
			id = "${project.group}.kubectl"
			implementationClass = "de.joshuagleitze.gradle.kubectl.KubectlPlugin"
		}
	}
}

val compileGeneratorKotlin by tasks.existing(KotlinCompile::class) {
	kotlinOptions {
		freeCompilerArgs += "-Xopt-in=kotlinx.serialization.ExperimentalSerializationApi"
		freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
		freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
		freeCompilerArgs += "-Xopt-in=io.ktor.util.KtorExperimentalAPI"
	}
}

val compileGeneratedKotlin by tasks.existing

val generateKubectlVersions by tasks.registering(JavaExec::class) {
	classpath = generator.runtimeClasspath
	mainClass.set("de.joshuagleitze.gradle.kubectl.generator.KubectlVersionsGenerator")
	systemProperties["jansi.force"] = true
	// compile the existing code first because it serves as a cache
	dependsOn(compileGeneratedKotlin)
	doFirst {
		args(
			generated.withConvention(KotlinSourceSet::class) { kotlin.sourceDirectories.first() },
			compileGeneratedKotlin.get().outputs.files.singleFile
		)
	}
}

tasks.compileKotlin {
	kotlinOptions {
		freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
	}
}

tasks.compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
	}
}

tasks.test {
	useJUnitPlatform {
		includeEngines("spek2")
	}
}

val Project.isSnapshot get() = versionDetails.commitDistance != 0
fun String.drop(prefix: String) = if (this.startsWith(prefix)) this.drop(prefix.length) else this
val Project.versionDetails get() = (this.extra["versionDetails"] as groovy.lang.Closure<*>)() as com.palantir.gradle.gitversion.VersionDetails
